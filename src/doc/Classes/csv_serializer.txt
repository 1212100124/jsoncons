    jsoncons_ext::csv::csv_serializer

The `csv_serializer` class is an instantiation of the `basic_csv_serializer` class template that uses char as the character type.  It implements [[json_output_handler]] and supports formatting a JSON value as a [CSV file](http://tools.ietf.org/html/rfc4180).

### Header

    #include "jsoncons_ext/csv/csv_serializer.hpp"

### Constructors

    csv_serializer(std::ostream& os)
Constructs a `csv_serializer` that is associated with an output stream
`os`. Uses default [[csv formatting parameters]].

    csv_serializer(std::ostream& os,
                   const json& params)
Constructs a `csv_serializer` that is associated with an output stream
`os` and [[csv formatting parameters]].

### Member functions


### Destructor

    virtual ~json_serializer()

### Event handler methods

    virtual void begin_object()
Receive notification of the start of a JSON object

    virtual void end_object()
Receive notification of the end of a JSON object

    virtual void begin_array()
Receive notification of the start of a JSON array

    virtual void end_array()
Receive notification of the end of a JSON object

    virtual void name(const std::string& name)
Receive notification of the `name` of a name value pair

    virtual void value(const std::string& val)
Receive notification of a `string` value

    virtual void value(double val)
Receive notification of a floating point number

    virtual void value(long long val)
Receive notification of a signed integer

    virtual void value(unsigned long long val)
Receive notification of a non-negative integer

    virtual void value(bool val)
Receive notification of a boolean value

    virtual void null_value()
Receive notification of `null`

### Examples

### Reading a comma delimted file into an array of json values

#### Comma delimited input file 

    country_code,name
    ABW,ARUBA
    ATF,"FRENCH SOUTHERN TERRITORIES, D.R. OF"
    VUT,VANUATU
    WLF,WALLIS & FUTUNA ISLANDS

Note 

- The first record contains a header line, but we're going to ignore that and read the entire file as an array of arrays.
- The third record has a field value that contains an embedded comma, so it must be quoted.

#### Reading the comma delimited file with csv_serializer

    std::string in_file = "countries.csv";
    std::ifstream is(in_file);

    json_deserializer handler;

    csv_serializer reader(is,handler);
    reader.read();
    json countries = std::move(handler.root());

    std::cout << countries << std::endl;

#### Output 

    [
        ["country_code","name"],
        ["ABW","ARUBA"],
        ["ATF","FRENCH SOUTHERN TERRITORIES, D.R. OF"],
        ["VUT","VANUATU"],
        ["WLF","WALLIS & FUTUNA ISLANDS"]
    ]

### Reading a tab delimted file into an array of json objects

#### Tab delimited input file

    employee-no	employee-name	dept	salary	note
    00000001	Smith, Matthew	sales	150,000.00	
    00000002	Brown, Sarah	sales	89,000.00	
    00000003	Oberc, Scott	finance	110,000.00	
    00000004	Scott, Colette	sales	75,000.00	"""Exemplary"" employee
    Dependable, trustworthy"

Note 

- The first record is a header line, which will be used to associate data values with names
- The fifth record has a field value that contains embedded quotes and a new line character, so it must be quoted and the embedded quotes escaped.

#### Reading the tab delimited file with csv_serializer

    std::string in_file = "employees.txt";
    std::ifstream is(in_file);

    json_deserializer handler;
    json paramsjson();
    params["field_delimiter"] = "\t";
    params["has_header"] = true;

    csv_serializer reader(is,handler,params);
    reader.read();
    json employees = std::move(handler.root());

    std::cout << employees << std::endl;

#### Output

    [
        {
            "dept":"sales",
            "employee-name":"Smith, Matthew",
            "employee-no":"00000001",
            "note":"",
            "salary":"150,000.00"
        },
        {
            "dept":"sales",
            "employee-name":"Brown, Sarah",
            "employee-no":"00000002",
            "note":"",
            "salary":"89,000.00"
        },
        {
            "dept":"finance",
            "employee-name":"Oberc, Scott",
            "employee-no":"00000003",
            "note":"",
            "salary":"110,000.00"
        },
        {
            "dept":"sales",
            "employee-name":"Scott, Colette",
            "employee-no":"00000004",
            "note":"\"Exemplary\" employee\nDependable, trustworthy",
            "salary":"75,000.00"
        }
    ]
