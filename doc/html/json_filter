<!DOCTYPE html>
<html>
<head>
<title>json_filter</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
<style type="text/css">
.highlight  { background: #ffffff; }
.highlight .c { color: #999988; font-style: italic } /* Comment */
.highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.highlight .k { font-weight: bold } /* Keyword */
.highlight .o { font-weight: bold } /* Operator */
.highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #999999; font-weight: bold } /* Comment.Preproc */
.highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */
.highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */
.highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */
.highlight .gd .x { color: #000000; background-color: #ffaaaa } /* Generic.Deleted.Specific */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #aa0000 } /* Generic.Error */
.highlight .gh { color: #999999 } /* Generic.Heading */
.highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */
.highlight .gi .x { color: #000000; background-color: #aaffaa } /* Generic.Inserted.Specific */
.highlight .go { color: #888888 } /* Generic.Output */
.highlight .gp { color: #555555 } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #aaaaaa } /* Generic.Subheading */
.highlight .gt { color: #aa0000 } /* Generic.Traceback */
.highlight .kc { font-weight: bold } /* Keyword.Constant */
.highlight .kd { font-weight: bold } /* Keyword.Declaration */
.highlight .kp { font-weight: bold } /* Keyword.Pseudo */
.highlight .kr { font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #009999 } /* Literal.Number */
.highlight .s { color: #d14 } /* Literal.String */
.highlight .na { color: #008080 } /* Name.Attribute */
.highlight .nb { color: #0086B3 } /* Name.Builtin */
.highlight .nc { color: #445588; font-weight: bold } /* Name.Class */
.highlight .no { color: #008080 } /* Name.Constant */
.highlight .ni { color: #800080 } /* Name.Entity */
.highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #990000; font-weight: bold } /* Name.Function */
.highlight .nn { color: #555555 } /* Name.Namespace */
.highlight .nt { color: #000080 } /* Name.Tag */
.highlight .nv { color: #008080 } /* Name.Variable */
.highlight .ow { font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #009999 } /* Literal.Number.Float */
.highlight .mh { color: #009999 } /* Literal.Number.Hex */
.highlight .mi { color: #009999 } /* Literal.Number.Integer */
.highlight .mo { color: #009999 } /* Literal.Number.Oct */
.highlight .sb { color: #d14 } /* Literal.String.Backtick */
.highlight .sc { color: #d14 } /* Literal.String.Char */
.highlight .sd { color: #d14 } /* Literal.String.Doc */
.highlight .s2 { color: #d14 } /* Literal.String.Double */
.highlight .se { color: #d14 } /* Literal.String.Escape */
.highlight .sh { color: #d14 } /* Literal.String.Heredoc */
.highlight .si { color: #d14 } /* Literal.String.Interpol */
.highlight .sx { color: #d14 } /* Literal.String.Other */
.highlight .sr { color: #009926 } /* Literal.String.Regex */
.highlight .s1 { color: #d14 } /* Literal.String.Single */
.highlight .ss { color: #990073 } /* Literal.String.Symbol */
.highlight .bp { color: #999999 } /* Name.Builtin.Pseudo */
.highlight .vc { color: #008080 } /* Name.Variable.Class */
.highlight .vg { color: #008080 } /* Name.Variable.Global */
.highlight .vi { color: #008080 } /* Name.Variable.Instance */
.highlight .il { color: #009999 } /* Literal.Number.Integer.Long */
.pl-c {
    color: #969896;
}

.pl-c1,.pl-mdh,.pl-mm,.pl-mp,.pl-mr,.pl-s1 .pl-v,.pl-s3,.pl-sc,.pl-sv {
    color: #0086b3;
}

.pl-e,.pl-en {
    color: #795da3;
}

.pl-s1 .pl-s2,.pl-smi,.pl-smp,.pl-stj,.pl-vo,.pl-vpf {
    color: #333;
}

.pl-ent {
    color: #63a35c;
}

.pl-k,.pl-s,.pl-st {
    color: #a71d5d;
}

.pl-pds,.pl-s1,.pl-s1 .pl-pse .pl-s2,.pl-sr,.pl-sr .pl-cce,.pl-sr .pl-sra,.pl-sr .pl-sre,.pl-src,.pl-v {
    color: #df5000;
}

.pl-id {
    color: #b52a1d;
}

.pl-ii {
    background-color: #b52a1d;
    color: #f8f8f8;
}

.pl-sr .pl-cce {
    color: #63a35c;
    font-weight: bold;
}

.pl-ml {
    color: #693a17;
}

.pl-mh,.pl-mh .pl-en,.pl-ms {
    color: #1d3e81;
    font-weight: bold;
}

.pl-mq {
    color: #008080;
}

.pl-mi {
    color: #333;
    font-style: italic;
}

.pl-mb {
    color: #333;
    font-weight: bold;
}

.pl-md,.pl-mdhf {
    background-color: #ffecec;
    color: #bd2c00;
}

.pl-mdht,.pl-mi1 {
    background-color: #eaffea;
    color: #55a532;
}

.pl-mdr {
    color: #795da3;
    font-weight: bold;
}

.pl-mo {
    color: #1d3e81;
}
.task-list {
padding-left:10px;
margin-bottom:0;
}

.task-list li {
    margin-left: 20px;
}

.task-list-item {
list-style-type:none;
padding-left:10px;
}

.task-list-item label {
font-weight:400;
}

.task-list-item.enabled label {
cursor:pointer;
}

.task-list-item+.task-list-item {
margin-top:3px;
}

.task-list-item-checkbox {
display:inline-block;
margin-left:-20px;
margin-right:3px;
vertical-align:1px;
}
</style>
</head>
<body>
<div class="highlight highlight-source-c++"><pre>jsoncons::json_filter

<span class="pl-k">typedef</span> basic_json_filter&lt;<span class="pl-k">char</span>&gt; json_filter</pre></div>
<p>The <code>json_filter</code> class is an instantiation of the <code>basic_json_filter</code> class template that uses <code>char</code> as the character type.</p>
<p><code>json_filter</code> is noncopyable and nonmoveable.</p>
<h3>Header</h3>
<pre><code>#include &lt;jsoncons/json_filter.hpp&gt;
</code></pre>
<h3>Base classes</h3>
<p><a href="json_input_handler">json_input_handler</a></p>
<h3>Member types</h3>
<table>
<thead>
<tr>
<th>Member type                         </th>
<th>Definition</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>string_view_type</code></td>
<td>A non-owning view of a string, holds a pointer to character data and length. Supports conversion to and from strings. Will be typedefed to the C++ 17 <code>std:string_view</code> if <code>JSONCONS_HAS_STRING_VIEW</code> is defined in <code>jsoncons_config.hpp</code>, otherwise to a substitute.</td>
</tr></tbody></table>
<h3>Constructors</h3>
<pre><code>json_filter(json_input_handler&amp; handler)
</code></pre>
<p>All JSON events that pass through the <code>json_filter</code> go to the specified <code>json_input_handler</code> (i.e. another filter.)<br>
You must ensure that the <code>handler</code> exists as long as does <code>json_filter</code>, as <code>json_filter</code> holds a pointer to but does not own this object.</p>
<pre><code>json_filter(json_output_handler&amp; handler)
</code></pre>
<p>All JSON events that pass through the <code>json_filter</code> go to the specified <code>json_output_handler</code>.<br>
You must ensure that the <code>handler</code> exists as long as does <code>json_filter</code>, as <code>json_filter</code> holds a pointer to but does not own this object.</p>
<h3>Accessors</h3>
<pre><code>operator json_output_handler&amp;() 
</code></pre>
<p>Adapts a <code>json_filter</code> to a <code>json_output_handler</code></p>
<pre><code>json_input_handler&amp; downstream_handler()
</code></pre>
<p>Returns a reference to the JSON handler that sends json events to downstream handlers.</p>
<h2>Examples</h2>
<h3>Rename object member names with the built in filter <a href="https://github.com/danielaparker/jsoncons/wiki/rename_name_filter">rename_name_filter</a></h3>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>jsoncons/json.hpp<span class="pl-pds">&gt;</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>jsoncons/json_filter.hpp<span class="pl-pds">&gt;</span></span>

<span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">jsoncons</span><span class="pl-k">;</span>

<span class="pl-k">int</span> <span class="pl-en">main</span>()
{
    std::string s = <span class="pl-s"><span class="pl-pds">R"(</span>{"first":1,"second":2,"fourth":3,"fifth":4}<span class="pl-pds">)"</span></span>;    

    json_serializer <span class="pl-smi">serializer</span>(std::cout);

    <span class="pl-c">// Filters can be chained</span>
    rename_name_filter <span class="pl-smi">filter2</span>(<span class="pl-s"><span class="pl-pds">"</span>fifth<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>fourth<span class="pl-pds">"</span></span>, serializer);
    rename_name_filter <span class="pl-smi">filter1</span>(<span class="pl-s"><span class="pl-pds">"</span>fourth<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>third<span class="pl-pds">"</span></span>, filter2);

    <span class="pl-c">// A filter can be passed to any function that takes</span>
    <span class="pl-c">// a json_input_handler ...</span>
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(1) <span class="pl-pds">"</span></span>;
    std::istringstream <span class="pl-smi">is</span>(s);
    json_reader <span class="pl-smi">reader</span>(is, filter1);
    reader.<span class="pl-c1">read</span>();
    std::cout &lt;&lt; std::endl;

    <span class="pl-c">// or a json_output_handler    </span>
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(2) <span class="pl-pds">"</span></span>;
    ojson j = <span class="pl-c1">ojson::parse</span>(s);
    j.<span class="pl-c1">write</span>(filter1);
    std::cout &lt;&lt; std::endl;
}</pre></div>
<p>Output:</p>
<div class="highlight highlight-source-json"><pre>(<span class="pl-c1">1</span>) {<span class="pl-s"><span class="pl-pds">"</span>first<span class="pl-pds">"</span></span>:<span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">"</span>second<span class="pl-pds">"</span></span>:<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>third<span class="pl-pds">"</span></span>:<span class="pl-c1">3</span>,<span class="pl-s"><span class="pl-pds">"</span>fourth<span class="pl-pds">"</span></span>:<span class="pl-c1">4</span>}
(<span class="pl-c1">2</span>) {<span class="pl-s"><span class="pl-pds">"</span>first<span class="pl-pds">"</span></span>:<span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">"</span>second<span class="pl-pds">"</span></span>:<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>third<span class="pl-pds">"</span></span>:<span class="pl-c1">3</span>,<span class="pl-s"><span class="pl-pds">"</span>fourth<span class="pl-pds">"</span></span>:<span class="pl-c1">4</span>}</pre></div>
<h3>Fix up names in an address book JSON file</h3>
<p>Example address book file (<code>address-book.json</code>):</p>
<div class="highlight highlight-source-json"><pre>{
    <span class="pl-s"><span class="pl-pds">"</span>address-book<span class="pl-pds">"</span></span> : 
    [
        {
            <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Jane Roe<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>jane.roe@example.com<span class="pl-pds">"</span></span>
        },
        {
             <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>,
             <span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span> : <span class="pl-s"><span class="pl-pds">"</span>john.doe@example.com<span class="pl-pds">"</span></span>
         }
    ]
}</pre></div>
<p>Suppose you want to break the name into a first name and last name, and report a warning when <code>name</code> does not contain a space or tab separated part.</p>
<p>You can achieve the desired result by subclassing the <a href="json_filter">json_filter</a> class, overriding the default methods for receiving name and string value events, and passing modified events on to the parent <a href="json_input_handler">json_input_handler</a> (which in this example will forward them to a <a href="json_serializer">json_serializer</a>.)</p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>jsoncons/json_serializer.hpp<span class="pl-pds">&gt;</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>jsoncons/json_filter.hpp<span class="pl-pds">&gt;</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>jsoncons/json_reader.hpp<span class="pl-pds">&gt;</span></span>

<span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">jsoncons</span><span class="pl-k">;</span>


<span class="pl-k">class</span> <span class="pl-en">name_fix_up_filter</span> : <span class="pl-k">public</span> <span class="pl-en">json_filter</span>
{
<span class="pl-k">public:</span>
    <span class="pl-en">name_fix_up_filter</span>(json_output_handler&amp; handler)
        : json_filter(handler)
    {
    }

<span class="pl-k">private:</span>
    <span class="pl-k">void</span> <span class="pl-en">do_name</span>(string_view_type name, 
                 <span class="pl-k">const</span> parsing_context&amp; context) <span class="pl-k">override</span>
    {
        member_name_ = name;
        <span class="pl-k">if</span> (member_name_ != <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>)
        {
            <span class="pl-v">this</span>-&gt;<span class="pl-c1">downstream_handler</span>().<span class="pl-c1">name</span>(name, context);
        }
    }

    <span class="pl-k">void</span> <span class="pl-en">do_string_value</span>(string_view_type val, 
                         <span class="pl-k">const</span> parsing_context&amp; context) <span class="pl-k">override</span>
    {
        <span class="pl-k">if</span> (member_name_ == <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>)
        {
            std::string value = val;
            <span class="pl-c1">size_t</span> end_first = value.<span class="pl-c1">find_first_of</span>(<span class="pl-s"><span class="pl-pds">"</span> <span class="pl-cce">\t</span><span class="pl-pds">"</span></span>);
            <span class="pl-c1">size_t</span> start_last = value.<span class="pl-c1">find_first_not_of</span>(<span class="pl-s"><span class="pl-pds">"</span> <span class="pl-cce">\t</span><span class="pl-pds">"</span></span>, end_first);
            <span class="pl-v">this</span>-&gt;<span class="pl-c1">downstream_handler</span>().<span class="pl-c1">name</span>(<span class="pl-s"><span class="pl-pds">"</span>first-name<span class="pl-pds">"</span></span>, context);
            std::string first = value.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, end_first);
            <span class="pl-v">this</span>-&gt;<span class="pl-c1">downstream_handler</span>().<span class="pl-c1">value</span>(first, context);
            <span class="pl-k">if</span> (start_last != std::string::npos)
            {
                <span class="pl-v">this</span>-&gt;<span class="pl-c1">downstream_handler</span>().<span class="pl-c1">name</span>(<span class="pl-s"><span class="pl-pds">"</span>last-name<span class="pl-pds">"</span></span>, context);
                std::string last = value.<span class="pl-c1">substr</span>(start_last);
                <span class="pl-v">this</span>-&gt;<span class="pl-c1">downstream_handler</span>().<span class="pl-c1">value</span>(last, context);
            }
            <span class="pl-k">else</span>
            {
                std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>Incomplete name <span class="pl-cce">\"</span><span class="pl-pds">"</span></span> &lt;&lt; value
                   &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\"</span> at line <span class="pl-pds">"</span></span> &lt;&lt; context.<span class="pl-c1">line_number</span>()
                   &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span> and column <span class="pl-pds">"</span></span> &lt;&lt; context.<span class="pl-c1">column_number</span>() &lt;&lt; std::endl;
            }
        }
        <span class="pl-k">else</span>
        {
            <span class="pl-v">this</span>-&gt;<span class="pl-c1">downstream_handler</span>().<span class="pl-c1">value</span>(val, context);
        }
    }

    std::string member_name_;
};</pre></div>
<p>Configure a <a href="name_fix_up_filter">name_fix_up_filter</a> to emit json events to a <a href="json_serializer">json_serializer</a>.</p>
<div class="highlight highlight-source-c++"><pre>std::ofstream <span class="pl-en">os</span>(<span class="pl-s"><span class="pl-pds">"</span>output/new-address-book.json<span class="pl-pds">"</span></span>);
json_serializer <span class="pl-en">serializer</span>(os, <span class="pl-c1">true</span>);
name_fix_up_filter <span class="pl-en">filter</span>(serializer);</pre></div>
<p>Parse the input and send the json events into the filter ...</p>
<div class="highlight highlight-source-c++"><pre>std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(1) <span class="pl-pds">"</span></span>;
std::ifstream <span class="pl-en">is</span>(<span class="pl-s"><span class="pl-pds">"</span>input/address-book.json<span class="pl-pds">"</span></span>);
json_reader <span class="pl-en">reader</span>(is, filter);
reader.read();
std:: &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;</pre></div>
<p>or read into a json value and write to the filter</p>
<div class="highlight highlight-source-c++"><pre>std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(2) <span class="pl-pds">"</span></span>;
json j;
is &gt;&gt; j;
j.write(filter);
std:: &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;</pre></div>
<p>Output:</p>
<pre><code>(1) Incomplete name "John" at line 9 and column 26 
(2) Incomplete name "John" at line 0 and column 0
</code></pre>
<p>Note that when filtering <code>json</code> events written from a <code>json</code> value to an output handler, contexual line and column information in the original file has been lost.</p>
<pre><code>
The new address book (`address-book-new.json`) with name fixes is
```json
{
    "address-book":
    [
        {
            "first-name":"Jane",
            "last-name":"Roe",
            "email":"jane.roe@example.com"
        },
        {
            "first-name":"John",
            "email":"john.doe@example.com"
        }
    ]
}
</code></pre>
</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
