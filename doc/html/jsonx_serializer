<!DOCTYPE html>
<html>
<head>
<title>jsonx_serializer</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
<style type="text/css">
.highlight  { background: #ffffff; }
.highlight .c { color: #999988; font-style: italic } /* Comment */
.highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.highlight .k { font-weight: bold } /* Keyword */
.highlight .o { font-weight: bold } /* Operator */
.highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #999999; font-weight: bold } /* Comment.Preproc */
.highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */
.highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */
.highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */
.highlight .gd .x { color: #000000; background-color: #ffaaaa } /* Generic.Deleted.Specific */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #aa0000 } /* Generic.Error */
.highlight .gh { color: #999999 } /* Generic.Heading */
.highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */
.highlight .gi .x { color: #000000; background-color: #aaffaa } /* Generic.Inserted.Specific */
.highlight .go { color: #888888 } /* Generic.Output */
.highlight .gp { color: #555555 } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #aaaaaa } /* Generic.Subheading */
.highlight .gt { color: #aa0000 } /* Generic.Traceback */
.highlight .kc { font-weight: bold } /* Keyword.Constant */
.highlight .kd { font-weight: bold } /* Keyword.Declaration */
.highlight .kp { font-weight: bold } /* Keyword.Pseudo */
.highlight .kr { font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #009999 } /* Literal.Number */
.highlight .s { color: #d14 } /* Literal.String */
.highlight .na { color: #008080 } /* Name.Attribute */
.highlight .nb { color: #0086B3 } /* Name.Builtin */
.highlight .nc { color: #445588; font-weight: bold } /* Name.Class */
.highlight .no { color: #008080 } /* Name.Constant */
.highlight .ni { color: #800080 } /* Name.Entity */
.highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #990000; font-weight: bold } /* Name.Function */
.highlight .nn { color: #555555 } /* Name.Namespace */
.highlight .nt { color: #000080 } /* Name.Tag */
.highlight .nv { color: #008080 } /* Name.Variable */
.highlight .ow { font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #009999 } /* Literal.Number.Float */
.highlight .mh { color: #009999 } /* Literal.Number.Hex */
.highlight .mi { color: #009999 } /* Literal.Number.Integer */
.highlight .mo { color: #009999 } /* Literal.Number.Oct */
.highlight .sb { color: #d14 } /* Literal.String.Backtick */
.highlight .sc { color: #d14 } /* Literal.String.Char */
.highlight .sd { color: #d14 } /* Literal.String.Doc */
.highlight .s2 { color: #d14 } /* Literal.String.Double */
.highlight .se { color: #d14 } /* Literal.String.Escape */
.highlight .sh { color: #d14 } /* Literal.String.Heredoc */
.highlight .si { color: #d14 } /* Literal.String.Interpol */
.highlight .sx { color: #d14 } /* Literal.String.Other */
.highlight .sr { color: #009926 } /* Literal.String.Regex */
.highlight .s1 { color: #d14 } /* Literal.String.Single */
.highlight .ss { color: #990073 } /* Literal.String.Symbol */
.highlight .bp { color: #999999 } /* Name.Builtin.Pseudo */
.highlight .vc { color: #008080 } /* Name.Variable.Class */
.highlight .vg { color: #008080 } /* Name.Variable.Global */
.highlight .vi { color: #008080 } /* Name.Variable.Instance */
.highlight .il { color: #009999 } /* Literal.Number.Integer.Long */
.pl-c {
    color: #969896;
}

.pl-c1,.pl-mdh,.pl-mm,.pl-mp,.pl-mr,.pl-s1 .pl-v,.pl-s3,.pl-sc,.pl-sv {
    color: #0086b3;
}

.pl-e,.pl-en {
    color: #795da3;
}

.pl-s1 .pl-s2,.pl-smi,.pl-smp,.pl-stj,.pl-vo,.pl-vpf {
    color: #333;
}

.pl-ent {
    color: #63a35c;
}

.pl-k,.pl-s,.pl-st {
    color: #a71d5d;
}

.pl-pds,.pl-s1,.pl-s1 .pl-pse .pl-s2,.pl-sr,.pl-sr .pl-cce,.pl-sr .pl-sra,.pl-sr .pl-sre,.pl-src,.pl-v {
    color: #df5000;
}

.pl-id {
    color: #b52a1d;
}

.pl-ii {
    background-color: #b52a1d;
    color: #f8f8f8;
}

.pl-sr .pl-cce {
    color: #63a35c;
    font-weight: bold;
}

.pl-ml {
    color: #693a17;
}

.pl-mh,.pl-mh .pl-en,.pl-ms {
    color: #1d3e81;
    font-weight: bold;
}

.pl-mq {
    color: #008080;
}

.pl-mi {
    color: #333;
    font-style: italic;
}

.pl-mb {
    color: #333;
    font-weight: bold;
}

.pl-md,.pl-mdhf {
    background-color: #ffecec;
    color: #bd2c00;
}

.pl-mdht,.pl-mi1 {
    background-color: #eaffea;
    color: #55a532;
}

.pl-mdr {
    color: #795da3;
    font-weight: bold;
}

.pl-mo {
    color: #1d3e81;
}
.task-list {
padding-left:10px;
margin-bottom:0;
}

.task-list li {
    margin-left: 20px;
}

.task-list-item {
list-style-type:none;
padding-left:10px;
}

.task-list-item label {
font-weight:400;
}

.task-list-item.enabled label {
cursor:pointer;
}

.task-list-item+.task-list-item {
margin-top:3px;
}

.task-list-item-checkbox {
display:inline-block;
margin-left:-20px;
margin-right:3px;
vertical-align:1px;
}
</style>
</head>
<body>
<div class="highlight highlight-source-c++"><pre>jsoncons::jsonx:jsonx_serializer

<span class="pl-k">typedef</span> basic_jsonx_serializer&lt;<span class="pl-k">char</span>&gt; jsonx_serializer</pre></div>

<p>The <code>jsonx_serializer</code> class is an instantiation of the <code>basic_jsonx_serializer</code> class template that uses <code>char</code> as the character type. It implements <a href="json_output_handler">json_output_handler</a> and supports formatting a JSON value as <a href="http://www.ibm.com/support/knowledgecenter/SS9H2Y_7.5.0/com.ibm.dp.doc/json_jsonx.html">JSONx</a> (XML).</p>

<h3>Header</h3>

<pre><code>#include &lt;jsoncons/jsonx/jsonx_serializer.hpp&gt;
</code></pre>

<h3>Implemented interfaces</h3>

<p><a href="json_output_handler">json_output_handler</a></p>

<h3>Constructors</h3>

<pre><code>jsonx_serializer(std::ostream&amp; os)
</code></pre>

<p>Constructs a new serializer that writes to the specified output stream.<br>
You must ensure that the output stream exists as long as does <code>jsonx_serializer</code>, as <code>jsonx_serializer</code> holds a pointer to but does not own this object.</p>

<pre><code>jsonx_serializer(std::ostream&amp; os, bool indenting)
</code></pre>

<p>Constructs a new serializer that writes to the specified output stream.<br>
You must ensure that the output stream exists as long as does <code>jsonx_serializer</code>, as <code>jsonx_serializer</code> holds a pointer to but does not own this object.</p>

<pre><code>jsonx_serializer(std::ostream&amp; os, const output_format&amp; format)
</code></pre>

<p>Constructs a new serializer that writes to the specified output stream using the specified <a href="output_format">output_format</a>.<br>
You must ensure that the output stream exists as long as does <code>jsonx_serializer</code>, as <code>jsonx_serializer</code> holds a pointer to but does not own this object.</p>

<pre><code>jsonx_serializer(std::ostream&amp; os, const output_format&amp; format, bool indenting)
</code></pre>

<p>Constructs a new serializer that writes to the specified output stream using the specified <a href="output_format">output_format</a>.<br>
You must ensure that the output stream exists as long as does <code>jsonx_serializer</code>, as <code>jsonx_serializer</code> holds a pointer to but does not own this object.</p>

<h3>Destructor</h3>

<pre><code>virtual ~jsonx_serializer()
</code></pre>

<h3>Examples</h3>

<pre><code>#include &lt;jsoncons/json.hpp&gt;
#include "jsoncons_ext/jsonx/jsonx_serializer.hpp"
#include &lt;fstream&gt;

using namespace jsoncons;
using namespace jsoncons::jsonx;
</code></pre>

<h3>JSONx conversion example</h3>

<div class="highlight highlight-source-c++"><pre>json person = json::parse(<span class="pl-s"><span class="pl-pds">R"(</span></span>
<span class="pl-s">{</span>
<span class="pl-s">  "name":"John Smith",</span>
<span class="pl-s">  "address": {</span>
<span class="pl-s">    "streetAddress": "21 2nd Street",</span>
<span class="pl-s">    "city": "New York",</span>
<span class="pl-s">    "state": "NY",</span>
<span class="pl-s">    "postalCode": 10021</span>
<span class="pl-s">  },</span>
<span class="pl-s">  "phoneNumbers": [</span>
<span class="pl-s">    "212 555-1111",</span>
<span class="pl-s">    "212 555-2222"</span>
<span class="pl-s">  ],</span>
<span class="pl-s">  "additionalInfo": null,</span>
<span class="pl-s">  "remote": false,</span>
<span class="pl-s">  "height": 62.4,</span>
<span class="pl-s">  "ficoScore": " &gt; 640"</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">)"</span></span>);

jsonx_serializer <span class="pl-en">serializer</span>(std::cout,<span class="pl-c1">true</span>);

person.write(serializer);</pre></div>

<p>Output:</p>

<div class="highlight highlight-text-xml"><pre>&lt;?<span class="pl-ent">xml</span><span class="pl-e"> version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span><span class="pl-e"> encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">object</span> <span class="pl-e">xsi</span><span class="pl-e">:</span><span class="pl-e">schemaLocation</span>=<span class="pl-s"><span class="pl-pds">"</span>http://www.datapower.com/schemas/json jsonx.xsd<span class="pl-pds">"</span></span>
    <span class="pl-e">xmlns</span><span class="pl-e">:</span><span class="pl-e">xsi</span>=<span class="pl-s"><span class="pl-pds">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="pl-pds">"</span></span>
    <span class="pl-e">xmlns</span><span class="pl-e">:</span><span class="pl-e">json</span>=<span class="pl-s"><span class="pl-pds">"</span>http://www.ibm.com/xmlns/prod/2009/jsonx<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">null</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>additionalInfo<span class="pl-pds">"</span></span>&gt;null&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">null</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">object</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>address<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>city<span class="pl-pds">"</span></span>&gt;New York&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
        &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">number</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>postalCode<span class="pl-pds">"</span></span>&gt;10021&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">number</span>&gt;
        &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span>&gt;NY&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
        &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>streetAddress<span class="pl-pds">"</span></span>&gt;21 2nd Street&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">object</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>ficoScore<span class="pl-pds">"</span></span>&gt; &gt; 640&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">number</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>height<span class="pl-pds">"</span></span>&gt;62.4&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">number</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>&gt;John Smith&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">array</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>phoneNumbers<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;212 555-1111&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
        &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;212 555-2222&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">array</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">boolean</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>remote<span class="pl-pds">"</span></span>&gt;false&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">boolean</span>&gt;
&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">object</span>&gt;</pre></div>

<h3>Special characters and escaped characters</h3>

<div class="highlight highlight-source-c++"><pre>ojson special_chars = ojson::parse(<span class="pl-s"><span class="pl-pds">R"(</span></span>
<span class="pl-s">{</span>
<span class="pl-s">  "&amp;":"&amp;",</span>
<span class="pl-s">  "&lt;":"&lt;",</span>
<span class="pl-s">  "&gt;":"&gt;",</span>
<span class="pl-s">  "\"":"\"",</span>
<span class="pl-s">  "'":"'",</span>
<span class="pl-s">  "\u00A9":""</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">)"</span></span>);

jsonx_serializer <span class="pl-en">serializer</span>(std::cout,<span class="pl-c1">true</span>);

special_chars.write(serializer);</pre></div>

<p>Output:</p>

<div class="highlight highlight-text-xml"><pre>&lt;?<span class="pl-ent">xml</span><span class="pl-e"> version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span><span class="pl-e"> encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">object</span> <span class="pl-e">xsi</span><span class="pl-e">:</span><span class="pl-e">schemaLocation</span>=<span class="pl-s"><span class="pl-pds">"</span>http://www.datapower.com/schemas/json jsonx.xsd<span class="pl-pds">"</span></span>
    <span class="pl-e">xmlns</span><span class="pl-e">:</span><span class="pl-e">xsi</span>=<span class="pl-s"><span class="pl-pds">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="pl-pds">"</span></span>
    <span class="pl-e">xmlns</span><span class="pl-e">:</span><span class="pl-e">json</span>=<span class="pl-s"><span class="pl-pds">"</span>http://www.ibm.com/xmlns/prod/2009/jsonx<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-c1">&amp;amp;</span><span class="pl-pds">"</span></span>&gt;<span class="pl-c1">&amp;amp;</span>&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-c1">&amp;lt;</span><span class="pl-pds">"</span></span>&gt;<span class="pl-c1">&amp;lt;</span>&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>&gt;<span class="pl-pds">"</span></span>&gt;&gt;&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-c1">&amp;#34;</span><span class="pl-pds">"</span></span>&gt;"&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>'<span class="pl-pds">"</span></span>&gt;'&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
    &lt;<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-c1">&amp;#x00A9;</span><span class="pl-pds">"</span></span>&gt;&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">string</span>&gt;
&lt;/<span class="pl-ent">json</span><span class="pl-ent">:</span><span class="pl-ent">object</span>&gt;</pre></div>
</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
