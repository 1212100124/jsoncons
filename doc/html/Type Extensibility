<!DOCTYPE html>
<html>
<head>
<title>Type Extensibility</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
<style type="text/css">
.highlight  { background: #ffffff; }
.highlight .c { color: #999988; font-style: italic } /* Comment */
.highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.highlight .k { font-weight: bold } /* Keyword */
.highlight .o { font-weight: bold } /* Operator */
.highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #999999; font-weight: bold } /* Comment.Preproc */
.highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */
.highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */
.highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */
.highlight .gd .x { color: #000000; background-color: #ffaaaa } /* Generic.Deleted.Specific */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #aa0000 } /* Generic.Error */
.highlight .gh { color: #999999 } /* Generic.Heading */
.highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */
.highlight .gi .x { color: #000000; background-color: #aaffaa } /* Generic.Inserted.Specific */
.highlight .go { color: #888888 } /* Generic.Output */
.highlight .gp { color: #555555 } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #aaaaaa } /* Generic.Subheading */
.highlight .gt { color: #aa0000 } /* Generic.Traceback */
.highlight .kc { font-weight: bold } /* Keyword.Constant */
.highlight .kd { font-weight: bold } /* Keyword.Declaration */
.highlight .kp { font-weight: bold } /* Keyword.Pseudo */
.highlight .kr { font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #009999 } /* Literal.Number */
.highlight .s { color: #d14 } /* Literal.String */
.highlight .na { color: #008080 } /* Name.Attribute */
.highlight .nb { color: #0086B3 } /* Name.Builtin */
.highlight .nc { color: #445588; font-weight: bold } /* Name.Class */
.highlight .no { color: #008080 } /* Name.Constant */
.highlight .ni { color: #800080 } /* Name.Entity */
.highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #990000; font-weight: bold } /* Name.Function */
.highlight .nn { color: #555555 } /* Name.Namespace */
.highlight .nt { color: #000080 } /* Name.Tag */
.highlight .nv { color: #008080 } /* Name.Variable */
.highlight .ow { font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #009999 } /* Literal.Number.Float */
.highlight .mh { color: #009999 } /* Literal.Number.Hex */
.highlight .mi { color: #009999 } /* Literal.Number.Integer */
.highlight .mo { color: #009999 } /* Literal.Number.Oct */
.highlight .sb { color: #d14 } /* Literal.String.Backtick */
.highlight .sc { color: #d14 } /* Literal.String.Char */
.highlight .sd { color: #d14 } /* Literal.String.Doc */
.highlight .s2 { color: #d14 } /* Literal.String.Double */
.highlight .se { color: #d14 } /* Literal.String.Escape */
.highlight .sh { color: #d14 } /* Literal.String.Heredoc */
.highlight .si { color: #d14 } /* Literal.String.Interpol */
.highlight .sx { color: #d14 } /* Literal.String.Other */
.highlight .sr { color: #009926 } /* Literal.String.Regex */
.highlight .s1 { color: #d14 } /* Literal.String.Single */
.highlight .ss { color: #990073 } /* Literal.String.Symbol */
.highlight .bp { color: #999999 } /* Name.Builtin.Pseudo */
.highlight .vc { color: #008080 } /* Name.Variable.Class */
.highlight .vg { color: #008080 } /* Name.Variable.Global */
.highlight .vi { color: #008080 } /* Name.Variable.Instance */
.highlight .il { color: #009999 } /* Literal.Number.Integer.Long */
.pl-c {
    color: #969896;
}

.pl-c1,.pl-mdh,.pl-mm,.pl-mp,.pl-mr,.pl-s1 .pl-v,.pl-s3,.pl-sc,.pl-sv {
    color: #0086b3;
}

.pl-e,.pl-en {
    color: #795da3;
}

.pl-s1 .pl-s2,.pl-smi,.pl-smp,.pl-stj,.pl-vo,.pl-vpf {
    color: #333;
}

.pl-ent {
    color: #63a35c;
}

.pl-k,.pl-s,.pl-st {
    color: #a71d5d;
}

.pl-pds,.pl-s1,.pl-s1 .pl-pse .pl-s2,.pl-sr,.pl-sr .pl-cce,.pl-sr .pl-sra,.pl-sr .pl-sre,.pl-src,.pl-v {
    color: #df5000;
}

.pl-id {
    color: #b52a1d;
}

.pl-ii {
    background-color: #b52a1d;
    color: #f8f8f8;
}

.pl-sr .pl-cce {
    color: #63a35c;
    font-weight: bold;
}

.pl-ml {
    color: #693a17;
}

.pl-mh,.pl-mh .pl-en,.pl-ms {
    color: #1d3e81;
    font-weight: bold;
}

.pl-mq {
    color: #008080;
}

.pl-mi {
    color: #333;
    font-style: italic;
}

.pl-mb {
    color: #333;
    font-weight: bold;
}

.pl-md,.pl-mdhf {
    background-color: #ffecec;
    color: #bd2c00;
}

.pl-mdht,.pl-mi1 {
    background-color: #eaffea;
    color: #55a532;
}

.pl-mdr {
    color: #795da3;
    font-weight: bold;
}

.pl-mo {
    color: #1d3e81;
}
.task-list {
padding-left:10px;
margin-bottom:0;
}

.task-list li {
    margin-left: 20px;
}

.task-list-item {
list-style-type:none;
padding-left:10px;
}

.task-list-item label {
font-weight:400;
}

.task-list-item.enabled label {
cursor:pointer;
}

.task-list-item+.task-list-item {
margin-top:3px;
}

.task-list-item-checkbox {
display:inline-block;
margin-left:-20px;
margin-right:3px;
vertical-align:1px;
}
</style>
</head>
<body>
<p>In the <code>json</code> class, constructors, accessors and modifiers are templated, for example,</p>

<div class="highlight highlight-source-c++"><pre><span class="pl-k">template </span>&lt;<span class="pl-k">class</span> <span class="pl-en">T</span>&gt;
<span class="pl-en">json</span>(<span class="pl-k">const</span> T&amp; val)

template&lt;class T&gt;
bool is() <span class="pl-k">const</span>

template&lt;class T&gt;
T as() <span class="pl-k">const</span>

template &lt;class T&gt;
basic_json&amp; operator=(<span class="pl-k">const</span> T&amp; val)

template &lt;class T&gt;
void add(<span class="pl-k">const</span> T&amp; val)</pre></div>

<p>The implementations of these functions and operators make use of the class template <code>json_type_traits</code></p>

<div class="highlight highlight-source-c++"><pre><span class="pl-k">template </span>&lt;<span class="pl-k">class</span> <span class="pl-en">Json</span>, <span class="pl-k">class</span> <span class="pl-en">T</span>, <span class="pl-k">class</span> <span class="pl-en">Enable</span>=<span class="pl-k">void</span>&gt;
<span class="pl-k">struct</span> <span class="pl-en">json_type_traits</span>;</pre></div>

<p>If you want to use the json constructor, <code>is&lt;T&gt;</code>, <code>as&lt;T&gt;</code>, <code>operator=</code>, <code>add</code>, and <code>set</code> to access or modify with a new type, you need to show <code>json</code> how to interact with that type, by extending <code>json_type_traits</code> in the <code>jsoncons</code> namespace.</p>

<h3>Example 1. Convert to/from user defined type</h3>

<p>You can provide a specialization of <code>json_type_traits</code> for a <code>book</code> class, and then transfer book objects or<br>
standard library collections of book objects to and from <code>json</code> values.</p>

<div class="highlight highlight-source-c++"><pre><span class="pl-k">struct</span> <span class="pl-en">book</span>
{
    std::string author;
    std::string title;
    <span class="pl-k">double</span> price;
};

<span class="pl-k">namespace</span> <span class="pl-en">jsoncons</span>
{
    <span class="pl-k">template</span>&lt;<span class="pl-k">class</span> <span class="pl-en">Json</span>&gt;
    <span class="pl-k">struct</span> <span class="pl-en">json_type_traits</span>&lt;Json, book&gt;
    {
        <span class="pl-k">static</span> <span class="pl-k">bool</span> <span class="pl-en">is</span>(<span class="pl-k">const</span> Json&amp; rhs) <span class="pl-k">noexcept</span>
        {
            <span class="pl-k">return</span> rhs.<span class="pl-c1">is_object</span>() &amp;&amp;
                   rhs.<span class="pl-c1">count</span>(<span class="pl-s"><span class="pl-pds">"</span>author<span class="pl-pds">"</span></span>) == <span class="pl-c1">1</span> &amp;&amp; 
                   rhs.<span class="pl-c1">count</span>(<span class="pl-s"><span class="pl-pds">"</span>title<span class="pl-pds">"</span></span>) == <span class="pl-c1">1</span> &amp;&amp; 
                   rhs.<span class="pl-c1">count</span>(<span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>) == <span class="pl-c1">1</span>;
        }
        <span class="pl-k">static</span> book <span class="pl-en">as</span>(<span class="pl-k">const</span> Json&amp; rhs)
        {
            book val;
            val.<span class="pl-smi">author</span> = rhs[<span class="pl-s"><span class="pl-pds">"</span>author<span class="pl-pds">"</span></span>].<span class="pl-smi">as</span>&lt;std::string&gt;();
            val.<span class="pl-smi">title</span> = rhs[<span class="pl-s"><span class="pl-pds">"</span>title<span class="pl-pds">"</span></span>].<span class="pl-smi">as</span>&lt;std::string&gt;();
            val.<span class="pl-smi">price</span> = rhs[<span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>].<span class="pl-smi">as</span>&lt;<span class="pl-k">double</span>&gt;();
            <span class="pl-k">return</span> val;
        }
        <span class="pl-k">static</span> Json <span class="pl-en">to_json</span>(<span class="pl-k">const</span> book&amp; val)
        {
            Json j;
            j[<span class="pl-s"><span class="pl-pds">"</span>author<span class="pl-pds">"</span></span>] = val.<span class="pl-smi">author</span>;
            j[<span class="pl-s"><span class="pl-pds">"</span>title<span class="pl-pds">"</span></span>] = val.<span class="pl-smi">title</span>;
            j[<span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>] = val.<span class="pl-smi">price</span>;
            <span class="pl-k">return</span> j;
        }
    };
};

<span class="pl-k">int</span> <span class="pl-en">main</span>()
{
    book book1{<span class="pl-s"><span class="pl-pds">"</span>Haruki Murakami<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Kafka on the Shore<span class="pl-pds">"</span></span>, <span class="pl-c1">25.17</span>};

    json j = book1;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(1) <span class="pl-pds">"</span></span> &lt;&lt; std::boolalpha &lt;&lt; j.<span class="pl-smi">is</span>&lt;book&gt;() &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(2) <span class="pl-pds">"</span></span> &lt;&lt; <span class="pl-c1">pretty_print</span>(j) &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    book temp = j.<span class="pl-smi">as</span>&lt;book&gt;();
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(3) <span class="pl-pds">"</span></span> &lt;&lt; temp.<span class="pl-smi">author</span> &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> 
                        &lt;&lt; temp.<span class="pl-smi">title</span> &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> 
                        &lt;&lt; temp.<span class="pl-smi">price</span> &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    book book2{<span class="pl-s"><span class="pl-pds">"</span>Charles Bukowski<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Women: A Novel<span class="pl-pds">"</span></span>, <span class="pl-c1">12.0</span>};

    std::vector&lt;book&gt; book_array{book1, book2};

    json ja = book_array;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(4) <span class="pl-pds">"</span></span> &lt;&lt; std::boolalpha 
                        &lt;&lt; ja.<span class="pl-smi">is</span>&lt;std::vector&lt;book&gt;&gt;() &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(5)<span class="pl-pds">"</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
    std::cout &lt;&lt; <span class="pl-c1">pretty_print</span>(ja) &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    <span class="pl-k">auto</span> book_list = ja.<span class="pl-smi">as</span>&lt;std::list&lt;book&gt;&gt;();

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(6)<span class="pl-pds">"</span></span> &lt;&lt; std::endl;
    <span class="pl-k">for</span> (<span class="pl-k">auto</span> b : book_list)
    {
        std::cout &lt;&lt; b.<span class="pl-smi">author</span> &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span> 
                  &lt;&lt; b.<span class="pl-smi">title</span> &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span> 
                  &lt;&lt; b.<span class="pl-smi">price</span> &lt;&lt; std::endl;
    }
}</pre></div>

<p>The output is</p>

<pre><code>(1) true

(2) {
    "author": "Haruki Murakami",
    "price": 25.17,
    "title": "Kafka on the Shore"
}

(3) Haruki Murakami,Kafka on the Shore,25.17

(4) true

(5)
[
    {
        "author": "Haruki Murakami",
        "price": 25.17,
        "title": "Kafka on the Shore"
    },
    {
        "author": "Charles Bukowski",
        "price": 12.0,
        "title": "Women: A Novel"
    }
]

(6)
Haruki Murakami, Kafka on the Shore, 25.17
Charles Bukowski, Women: A Novel, 12
</code></pre>

<h3>Example 2. Convert to/from <code>boost::gregorian::date</code>
</h3>

<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>jsoncons/json.hpp<span class="pl-pds">"</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>boost/date_time/gregorian/gregorian.hpp<span class="pl-pds">"</span></span>

<span class="pl-k">namespace</span> <span class="pl-en">jsoncons</span> 
{
    <span class="pl-k">template </span>&lt;<span class="pl-k">class</span> <span class="pl-en">Json</span>&gt;
    <span class="pl-k">struct</span> <span class="pl-en">json_type_traits</span>&lt;Json,boost::gregorian::date&gt;
    {
        <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> is_assignable = <span class="pl-c1">true</span>;

        <span class="pl-k">static</span> <span class="pl-k">bool</span> <span class="pl-en">is</span>(<span class="pl-k">const</span> Json&amp; val) <span class="pl-k">noexcept</span>
        {
            <span class="pl-k">if</span> (!val.<span class="pl-c1">is_string</span>())
            {
                <span class="pl-k">return</span> <span class="pl-c1">false</span>;
            }
            std::string s = val.<span class="pl-smi">template</span> as&lt;std::string&gt;();
            <span class="pl-k">try</span>
            {
                <span class="pl-c1">boost::gregorian::from_simple_string</span>(s);
                <span class="pl-k">return</span> <span class="pl-c1">true</span>;
            }
            <span class="pl-k">catch</span> (...)
            {
                <span class="pl-k">return</span> <span class="pl-c1">false</span>;
            }
        }

        <span class="pl-k">static</span> boost::gregorian::date <span class="pl-en">as</span>(<span class="pl-k">const</span> Json&amp; val)
        {
            std::string s = val.<span class="pl-smi">template</span> as&lt;std::string&gt;();
            <span class="pl-k">return</span> <span class="pl-c1">boost::gregorian::from_simple_string</span>(s);
        }

        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">assign</span>(Json&amp; lhs, boost::gregorian::date val)
        {
            lhs.<span class="pl-c1">assign_string</span>(<span class="pl-c1">to_iso_extended_string</span>(val));
        }
    };
}</pre></div>

<div class="highlight highlight-source-c++"><pre>    <span class="pl-k">using</span> jsoncons::json;
    <span class="pl-k">using</span> boost::gregorian::date;

<span class="pl-k">int</span> <span class="pl-en">main</span>()
{
    json deal = <span class="pl-c1">json::parse</span>(<span class="pl-s"><span class="pl-pds">R"(</span></span>
<span class="pl-s">    {</span>
<span class="pl-s">        "Maturity":"2014-10-14",</span>
<span class="pl-s">        "ObservationDates": ["2014-02-14","2014-02-21"]</span>
<span class="pl-s">    }</span>
<span class="pl-s">    <span class="pl-pds">)"</span></span>);

    deal[<span class="pl-s"><span class="pl-pds">"</span>ObservationDates<span class="pl-pds">"</span></span>].<span class="pl-c1">add</span>(<span class="pl-c1">date</span>(<span class="pl-c1">2014</span>,<span class="pl-c1">2</span>,<span class="pl-c1">28</span>));    

    date maturity = deal[<span class="pl-s"><span class="pl-pds">"</span>Maturity<span class="pl-pds">"</span></span>].<span class="pl-smi">as</span>&lt;date&gt;();
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>Maturity: <span class="pl-pds">"</span></span> &lt;&lt; maturity &lt;&lt; std::endl &lt;&lt; std::endl;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>Observation dates: <span class="pl-pds">"</span></span> &lt;&lt; std::endl &lt;&lt; std::endl;

    <span class="pl-k">for</span> (<span class="pl-k">auto</span> observation_date: deal[<span class="pl-s"><span class="pl-pds">"</span>ObservationDates<span class="pl-pds">"</span></span>].<span class="pl-c1">elements</span>())
    {
        std::cout &lt;&lt; observation_date &lt;&lt; std::endl;
    }
    std::cout &lt;&lt; std::endl;
}</pre></div>

<p>The output is</p>

<pre><code>Maturity: 2014-Oct-14

Observation dates:

2014-Feb-14
2014-Feb-21
2014-Feb-28
</code></pre>

<h3>Example 3. Convert to/from <code>boost::numeric::ublas::matrix&lt;T&gt;</code>
</h3>

<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>jsoncons/json.hpp<span class="pl-pds">"</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>boost/numeric/ublas/matrix.hpp<span class="pl-pds">&gt;</span></span>

<span class="pl-k">namespace</span> <span class="pl-en">jsoncons</span> 
{
        <span class="pl-k">static</span> <span class="pl-k">bool</span> <span class="pl-en">is</span>(<span class="pl-k">const</span> Json&amp; val) <span class="pl-k">noexcept</span>
        {
            <span class="pl-k">if</span> (!val.<span class="pl-c1">is_array</span>())
            {
                <span class="pl-k">return</span> <span class="pl-c1">false</span>;
            }
            <span class="pl-k">if</span> (val.<span class="pl-c1">size</span>() &gt; <span class="pl-c1">0</span>)
            {
                <span class="pl-c1">size_t</span> n = val[<span class="pl-c1">0</span>].<span class="pl-c1">size</span>();
                <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; a: val.<span class="pl-c1">elements</span>())
                {
                    <span class="pl-k">if</span> (!(a.<span class="pl-c1">is_array</span>() &amp;&amp; a.<span class="pl-c1">size</span>() == n))
                    {
                        <span class="pl-k">return</span> <span class="pl-c1">false</span>;
                    }
                    <span class="pl-k">for</span> (<span class="pl-k">auto</span> x: a.<span class="pl-c1">elements</span>())
                    {
                        <span class="pl-k">if</span> (!x.<span class="pl-smi">is</span>&lt;T&gt;())
                        {
                            <span class="pl-k">return</span> <span class="pl-c1">false</span>;
                        }
                    }
                }
            }
            <span class="pl-k">return</span> <span class="pl-c1">true</span>;
        }

        <span class="pl-k">static</span> boost::numeric::ublas::matrix&lt;T&gt; <span class="pl-en">as</span>(<span class="pl-k">const</span> Json&amp; val)
        {
            <span class="pl-k">if</span> (val.<span class="pl-c1">is_array</span>() &amp;&amp; val.<span class="pl-c1">size</span>() &gt; <span class="pl-c1">0</span>)
            {
                <span class="pl-c1">size_t</span> m = val.<span class="pl-c1">size</span>();
                <span class="pl-c1">size_t</span> n = <span class="pl-c1">0</span>;
                <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; a : val.<span class="pl-c1">elements</span>())
                {
                    <span class="pl-k">if</span> (a.<span class="pl-c1">size</span>() &gt; n)
                    {
                        n = a.<span class="pl-c1">size</span>();
                    }
                }

                boost::numeric::ublas::matrix&lt;T&gt; <span class="pl-c1">A</span>(m,n,<span class="pl-c1">T</span>());
                <span class="pl-k">for</span> (<span class="pl-c1">size_t</span> i = <span class="pl-c1">0</span>; i &lt; m; ++i)
                {
                    <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; a = val[i];
                    <span class="pl-k">for</span> (<span class="pl-c1">size_t</span> j = <span class="pl-c1">0</span>; j &lt; a.<span class="pl-c1">size</span>(); ++j)
                    {
                        <span class="pl-c1">A</span>(i,j) = a[j].<span class="pl-smi">as</span>&lt;T&gt;();
                    }
                }
                <span class="pl-k">return</span> A;
            }
            <span class="pl-k">else</span>
            {
                boost::numeric::ublas::matrix&lt;T&gt; A;
                <span class="pl-k">return</span> A;
            }
        }

        <span class="pl-k">static</span> Json <span class="pl-en">to_json</span>(<span class="pl-k">const</span> boost::numeric::ublas::matrix&lt;T&gt;&amp; val)
        {
            Json a = Json::make_array&lt;<span class="pl-c1">2</span>&gt;(val.<span class="pl-c1">size1</span>(), val.<span class="pl-c1">size2</span>(),<span class="pl-c1">T</span>());
            <span class="pl-k">for</span> (<span class="pl-c1">size_t</span> i = <span class="pl-c1">0</span>; i &lt; val.<span class="pl-c1">size1</span>(); ++i)
            {
                <span class="pl-k">for</span> (<span class="pl-c1">size_t</span> j = <span class="pl-c1">0</span>; j &lt; val.<span class="pl-c1">size1</span>(); ++j)
                {
                    a[i][j] = <span class="pl-c1">val</span>(i,j);
                }
            }
            <span class="pl-k">return</span> a;
        }
    };
}</pre></div>

<div class="highlight highlight-source-c++"><pre>    <span class="pl-k">using</span> jsoncons::json;
    <span class="pl-k">using</span> boost::gregorian::date;

<span class="pl-k">int</span> <span class="pl-en">main</span>()
{
    matrix&lt;<span class="pl-k">double</span>&gt; <span class="pl-c1">A</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>);
    <span class="pl-c1">A</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>) = <span class="pl-c1">1.1</span>;
    <span class="pl-c1">A</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>) = <span class="pl-c1">2.1</span>;
    <span class="pl-c1">A</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>) = <span class="pl-c1">3.1</span>;
    <span class="pl-c1">A</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>) = <span class="pl-c1">4.1</span>;

    json a = A;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(1) <span class="pl-pds">"</span></span> &lt;&lt; std::boolalpha &lt;&lt; a.<span class="pl-smi">is</span>&lt;matrix&lt;<span class="pl-k">double</span>&gt;&gt;() &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(2) <span class="pl-pds">"</span></span> &lt;&lt; std::boolalpha &lt;&lt; a.<span class="pl-smi">is</span>&lt;matrix&lt;<span class="pl-k">int</span>&gt;&gt;() &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(3) <span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    std::cout &lt;&lt; <span class="pl-c1">pretty_print</span>(a) &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;

    matrix&lt;<span class="pl-k">double</span>&gt; B = a.<span class="pl-smi">as</span>&lt;matrix&lt;<span class="pl-k">double</span>&gt;&gt;();

    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>(4) <span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;
    <span class="pl-k">for</span> (<span class="pl-c1">size_t</span> i = <span class="pl-c1">0</span>; i &lt; B.<span class="pl-c1">size1</span>(); ++i)
    {
        <span class="pl-k">for</span> (<span class="pl-c1">size_t</span> j = <span class="pl-c1">0</span>; j &lt; B.<span class="pl-c1">size2</span>(); ++j)
        {
            <span class="pl-k">if</span> (j &gt; <span class="pl-c1">0</span>)
            {
                std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span>;
            }
            std::cout &lt;&lt; <span class="pl-c1">B</span>(i, j);
        }
        std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
    }
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n\n</span><span class="pl-pds">"</span></span>;
}</pre></div>

<p>The output is</p>

<pre><code>(1) true

(2) false

(3)

[
    [1.1,2.1],
    [3.1,4.1]
]

(4)

1.1,2.1
3.1,4.1
</code></pre>
</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
